@top Program { statement ((';' | '\n') statement)*  }

@external tokens tokenizer from "./tokenizer" {
  Register,
  Directive,
  Comment,
  Opcode, IOpcode,
  RelOpcode, IRelOpcode,
  Prefix,
  word,
  Ptr,
  Offset,
  symEquals,
  VEXRound,
  number,
  immPrefix,
  LabelDefinition
}

@skip {Space}

@tokens {
  Space { std.whitespace }
  charString { "'" (![\\'] | "\\" _)* "'"? }
  FullString { '"' (![\\"] | "\\" _)* '"'? }
  unary { '+' | '-' | '~' | '!' }
  operator { $[+\-/*%|&^<>!] | '||' | '&&' | '>>' | '<<' | '<>' | '==' | '!=' | '>=' | '<='}
  @precedence { '\n', Space }
}

statement {
  LabelDefinition |
  (
  InstructionStatement |
  DirectiveStatement |
  SymbolDefinition
  ) Comment?
}


InstructionStatement {
  Prefix* (
    (Opcode VEXRound? commaSep<(Register | Immediate | Relative | Memory) VEXRound? VEXMask? VEXRound?>)
    |
    (IOpcode commaSep<Ptr? (Register | (Offset Expression) | IImmediate | IMemory) VEXRound? VEXMask? VEXRound?>)
    |
    (RelOpcode (('*' (Register | Relative | Memory)) | Register | Expression | Memory))
    |
    (IRelOpcode (Register | Expression | IMemory))
  )?
}

DirectiveStatement {
  LabelName { word }? Directive commaSep<Expression | FullString>
}

Immediate {
  immPrefix Expression
}

Memory {
  Relative? '(' ("" | Register ("," (Register | number)?)*) ')'
}

IMemory {
  Relative? '[' iMemExpr ']'
}

VEXMask { '{' Register '}' }

IImmediate[@dynamicPrecedence=1] { (unary | '(')* (number | charString) ')'* (operator IImmediate)? ~immSplit }
Relative { (unary | '(')* (number | charString | word) ')'* (operator Relative)? ~immSplit }
Expression { (unary | '(')* (number | charString | word) ')'* (operator Expression)? }
iMemExpr { (unary | '(')* (Register | number | charString | word) ')'* (operator iMemExpr)? }

SymbolDefinition { word symEquals Expression }

commaSep<content> {
  "" | content (',' content?)*
}